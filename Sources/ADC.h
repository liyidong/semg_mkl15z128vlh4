/* ###################################################################
 **     THIS COMPONENT MODULE IS GENERATED BY USER
 **     Filename    : ADC.h
 **     Project     : semg_mkl15z128vlh4
 **     Processor   : MKL15Z128VLH4
 **     Component   : ADS1198
 **     Version     : APRIL 2010-REVISED NOVEMBER 2011
 **     Datasheet   : SBAS471C
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2013-07-12, 20:06, # CodeGen: 0
 **     Author	    : Dong
 **     Abstract    :
 **			This file contains ADC operation functions.
 **     Settings    :
 **
 **     Contents    :
 **         Init               - void ADCInit(void);
 **         Configure          - LDD_TError ADCConfigure(void);
 **         Enable             - LDD_TError ADCEnable(void);
 **         Disable            - LDD_TError ADCDisable(void);
 **         PowerUp            - LDD_TError ADCPowerUp(void);
 **         PowerDown          - LDD_TError ADCPowerDown(void);
 **         UseInClock         - LDD_TError ADCUseInternalClock(void);
 **         UseExClock         - LDD_TError ADCUseExternalClock(void);
 **         StartConvert       - LDD_TError ADCStartConvertByHardware(void);
 **                            - LDD_TError ADCStartConvertByCommand(void);
 **         StopConvert        - LDD_TError ADCStopConvertByHardware(void);
 **                            - LDD_TError ADCStopConvertByCommand(void);
 **         Reset              - void ADCResetByHardware(void);
 **                            - LDD_TError ADCResetByCommand(void);
 **         DaisyConnect       - LDD_TError ADCDaisyConnect(void);
 **         DirectConnect      - LDD_TError ADCDirectConnect(void);
 **         WakeUp             - LDD_TError ADCWakeUp();
 **         StandBy            - LDD_TError ADCStandBy();
 **         RDATAC             - LDD_TError ADCReadDataContinuous(void);
 **         SDATAC             - LDD_TError ADCStopDataContinuous(void);
 **         SendCommand        - LDD_TError ADCSendCommand(byte* cmd, uint8 len);
 **         ReadRegister       - LDD_TError ADCReadRegister(byte regAddr, uint8 n, byte* dat, uint16 len);
 **         WriteRegister      - LDD_TError ADCWriteRegister(byte regAddr, uint8 n, byte* dat, uint16 len);
 **         ReadData           - LDD_TError ADCReadContinuousData();
 **                            - LDD_TError ADCReadData();
 **         ADCDataInit        - ADCDataInit(TADCDataPtr userDataPtr);
 **         CheckCommand       - LDD_TError CheckCommand(byte cmd);
 **         
 **     Mail      	: pzdongdong@163.com
 **     
 **     Revision    : No.  Name        Date/Time        Content
 ** ###################################################################*/
/*!
 * @file ADC.h
 * @version 01.00
 * @brief	
 * 		This file contains ADC operation functions.
 */
/*!
 *  @addtogroup ADC_module	ADC module documentation
 *      This module contains ADC operation functions.
 *  @{
 */

/* MODULE ADC. */

#ifndef ADC_H_
#define ADC_H_

/* MODULE Init. */

/* {Default RTOS Adapter} No RTOS includes */
#include "Macros.h"

#ifdef __cplusplus
extern "C"
{   
#endif

/*
 * ===================================================================
 *     Method      :  ADCInit (Component ADC)
 */
/*!
 *     @brief
 *          Initializes ADC. 
 *          The method is called in the PeripheralInit function and will be called
 *          only once.
 */
/* ===================================================================*/
void ADCInit(void);

/*
 * ===================================================================
 *     Method      : ADCConfigure (Module ADC)
 */
/*!
 *     @brief
 *         	Configure the registers of ADC via SPI1.  	
 *     @return
 *         	                - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCConfigure(void);

/*
 * ===================================================================
 *     Method      :  ADCEnable (Component ADC)
 */
/*!
 *     @brief
 *          Signal ~CS is low, enable ADC.
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCEnable(void);

/*
 * ===================================================================
 *     Method      :  ADCDisable (Component ADC)
 */
/*!
 *     @brief
 *          Signal ~CS is High, disable ADC.
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 *           
 */
/* ===================================================================*/
LDD_TError ADCDisable(void);

/*
 * ===================================================================
 *     Method      :  ADCPowerUp (Component ADC)
 */
/*!
 *     @brief
 *          Signal ~PWDN is high, ADC power up. 
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCPowerUp(void);

/*
 * ===================================================================
 *     Method      :  ADCPowerDown (Component ADC)
 */
/*!
 *     @brief
 *          Signal ~PWDN is low, ADC power down. 
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCPowerDown(void);

/*
 * ===================================================================
 *     Method      :  ADCUseInternalClock (Component ADC)
 */
/*!
 *     @brief
 *          Signal CLKSEL is high, ADC uses internal clock. 
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCUseInternalClock(void);

/*
 * ===================================================================
 *     Method      :  ADCUseExternalClock (Component ADC)
 */
/*!
 *     @brief
 *          Signal CLKSEL is low, ADC uses external clock. 
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCUseExternalClock(void);

/*
 * ===================================================================
 *     Method      :  ADCStartConvertByHardware (Component ADC)
 */
/*!
 *     @brief
 *          Signal START is high, ADC starts to convert.
 *          This function starts ADC to convert via signal START.
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCStartConvertByHardware(void);

/*
 * ===================================================================
 *     Method      :  ADCStartConvertByCommand (Component ADC)
 */
/*!
 *     @brief
 *          MCU sends START command to ADC, ADC starts to convert.
 *          This function starts ADC to convert via SPI1.
 *          In this method, signal START must be low.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCStartConvertByCommand(void);

/*
 * ===================================================================
 *     Method      :  ADCStopConvertByHardware (Component ADC)
 */
/*!
 *     @brief
 *          Signal START is low, ADC stops converting.
 *          This function starts ADC to convert via signal START.
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCStopConvertByHardware(void);

/*
 * ===================================================================
 *     Method      :  ADCStartConvertByCommand (Component ADC)
 */
/*!
 *     @brief
 *          MCU sends STOP command to ADC, ADC stops to convert.
 *          This function stops ADC to convert via SPI1.
 *          In this method, signal START must be low.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCStopConvertByCommand(void);

/*
 * ===================================================================
 *     Method      :  ADCResetByHardware (Component ADC)
 */
/*!
 *     @brief
 *          Signal ~RESET varies from high to low to high, ADC resets. 
 *          This function resets ADC via signal RESET.
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
void ADCResetByHardware(void);

/*
 * ===================================================================
 *     Method      :  ADCResetByCommand (Component ADC)
 */
/*!
 *     @brief
 *          MCU sends RESET command to ADC, ADC resets.
 *          This function resets ADC via SPI1.
 *          Avoid sending any commands during reset.
 */
/* ===================================================================*/
LDD_TError ADCResetByCommand(void);

/*
 * ===================================================================
 *     Method      :  ADCDaisyConnect (Component ADC)
 */
/*!
 *     @brief
 *          Signal Daisy_IN is high, ADC connects in daisy mode. 
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCDaisyConnect(void);

/*
 * ===================================================================
 *     Method      :  ADCDirectConnect (Component ADC)
 */
/*!
 *     @brief
 *          Signal Daisy_IN is low, ADC connects in direct mode. 
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCDirectConnect(void);


/*
 * ===================================================================
 *     Method      : ADCWakeUp (Component ADC)
 */
/*!
 *     @brief
 *         	Send command WAKEUP to ADC via SPI1 to wake up ADC
 *         	from low-power standby mode.
 *     @return
 *         	                - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCWakeUp(void);

/*
 * ===================================================================
 *     Method      : ADCStandBy (Component ADC)
 */
/*!
 *     @brief
 *          Send command STANDBY via SPI1 to make ADC entering
 *          the low-power standby mode.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCStandBy(void);

/*
 * ===================================================================
 *     Method      : ADCReadDataContinuous (Component ADC)
 */
/*!
 *     @brief
 *          Send command RDATAC via SPI1 to make the conversion data
 *          of ADC can read continuously without command RDATA.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCReadDataContinuous(void);

/*
 * ===================================================================
 *     Method      : ADCWakeUp (Component ADC)
 */
/*!
 *     @brief
 *          Send command SDATAC to ADC via SPI1 to stop ADC's RDATAC mode.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCStopReadDataContinuous(void);

/*
 * ===================================================================
 *     Method      : ADCSendCommand (Component ADC)
 */
/*!
 *     @brief
 *          Send command to ADC via SPI1.
 *     @param[in]
 *          cmd             - Pointer to command to be sent.
 *                            See group ADC Commands in Macros.h.
 *     @param[in]
 *          len             - The length of command.
 *                            The available value is 1 for most commands,
 *                            except for command read/write register
 *                            which must be 2.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:             
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError ADCSendCommand(byte* cmd, uint8 len);

/*
 * ===================================================================
 *     Method      : ADCReadRegister (Component ADC)
 */
/*!
 *     @brief
 *          Read data from register of ADC via SPI1.
 *     @param[in]
 *          regAddr         - The first address of register(s) to be read.
 *     @param[in]
 *          n               - The number of registers to be read.
 *     @param[out]
 *          dat             - Pointer to buffer where received data in.
 *     @param[in]
 *          len             - The length of data bytes to be read.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:             
 *                              - ERR_OK       - OK.             
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.           
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */                                
/* ===================================================================*/
LDD_TError ADCReadRegister(byte regAddr, uint8 n, byte* dat, uint16 len);

/*
 * ===================================================================
 *     Method      : ADCWriteRegister (Component ADC)
 */
/*!
 *     @brief
 *          Write data to register of ADC via SPI1.
 *     @param[in]
 *          regAddr         - The first address of register(s) to be written.
 *     @param[in]
 *          n               - The number of registers to be written.
 *     @param[in]
 *          dat             - Pointer to buffer where data to be written in.
 *     @param[in]
 *          len             - The length of data bytes to be written.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:             
 *                              - ERR_OK           - OK.             
 *                              - ERR_SPEED        - This device does not work in
 *                                                   the active clock configuration.           
 *                              - ERR_DISABLED     - Component is disabled.
 *                              - ERR_BUSY         - The previous receive request is
 *                                                   pending.
 *                              - etc.             - See PE_Error.h.
 */                                
/* ===================================================================*/
LDD_TError ADCWriteRegister(byte regAddr, uint8 n, byte* dat, uint16 len);

/*
 * ===================================================================
 *     Method      : ADCReadContinuousData (Component ADC)
 */
/*!
 *     @brief
 *          Read conversion data from ADC in RDATAC mode via SPI1.
 *     @param[out]
 *          dat             - Pointer to buffer where received data in.
 *     @param[in]
 *          len             - The length of data bytes to be read.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:             
 *                              - ERR_OK       - OK.             
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.           
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError ADCReadContinuousData(byte* dat, uint16 len);

/*
 * ===================================================================
 *     Method      : ADCReadData (Component ADC)
 */
/*!
 *     @brief
 *          Read conversion data from ADC in RDATA mode via SPI1.
 *     @param[out]
 *          dat             - Pointer to buffer where received data in.
 *     @param[in]
 *          len             - The length of data bytes to be read.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:             
 *                              - ERR_OK       - OK.             
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.           
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */                                
/* ===================================================================*/
LDD_TError ADCReadData(byte* dat, uint16 len);

/*
 * ===================================================================
 *     Method      : ADCDataInit(Module ADC)
 */
/*!
 *     @brief
 *          This method initialize the ADC data structure.
 *     @param
 *          userDataPtr     - Pointer to specific user data. 
 *     @return
 *                          - ADC data structure.
 */
/* ===================================================================*/
TADCData ADCDataInit(TADCDataPtr userDataPtr);

/*
 * ===================================================================
 *     Method      : CheckCommand (Module ADC)
 */
/*!
 *     @brief
 *          This method checks if the command is valid.
 *     @param[in]
 *          cmd             - Command to be checked.
 *     @param[in]
 *          len             - The length of command to be checked.
 *                            The available value is 1 for most commands,
 *                            except for command read/write register
 *                            which must be 2.
 *     @return
 *                          - ERR_OK: Command is valid and the length is legal.
 *                          - ERR_PARAM_COMMAND: Command is invalid.
 *                          - ERR_PARAM_LENGTH: Length is illegal.
 */
/* ===================================================================*/
LDD_TError CheckCommand(byte cmd, uint8 len);
    
    /* END ADC. */

#ifdef __cplusplus
} /* extern "C" */
#endif 

#endif
/* ADC_H_ */

/*!
 * @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Dong
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */

