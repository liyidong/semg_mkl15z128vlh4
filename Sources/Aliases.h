/* ###################################################################
 **     THIS COMPONENT MODULE IS GENERATED BY USER.
 **     Filename    : Aliases.h
 **     Project     : semg_mkl15z128vlh4
 **     Processor   : MKL15Z128VLH4
 **     Component   : 
 **     Version     : 
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2013-07-14, 00:30, # CodeGen: 0
 **     Author      : Dong
 **     Abstract    :
 **          This file contains ports and functions aliases.
 **          Aliases guarantee minimum modification of code,
 **          when ports or functions changed.
 **
 **     
 **     Mail        : pzdongdong@163.com
 **     
 **     Revision    : No.  Name        Date/Time        Content
 ** ###################################################################*/
/*!
 * @file Aliases.h
 * @version 01.00
 * @brief
 *      This file contains ports and functions aliases.
 *      Aliases guarantee minimum modification of code,
 *      when ports or functions changed.
 *          
 */
/*!
 *  @addtogroup Ala Alias
 *      This module contains ports and functions aliases.
 *      Aliases guarantee minimum modification of code,
 *      when ports or functions changed.
 *  @{
 */

#ifndef ALIASES_H_
#define ALIASES_H_
/* MODULE ALIASES */

#include "Settings.h"

/* 
 * ===================================================================
 * Devices Aliases
 * ===================================================================
 */
        /*!
         * @addtogroup DevAla Devices Aliases
         * @{
         */
            /*!
             * @{
             */
#define SYSTICK SysTick_DEVICE
            /*!
             * @}
             */
            /*!
             * @{
             */
#define EINT_SYNC_INT  portA2DevData
#define EINT_NOT_DRDY  portD4DevData
#define IO_START       portB1DevData
#define IO_DAISY_IN    portC1DevData
#define IO_CLKSEL      portC2DevData
#define IO_TEST_SGINAL portC3DevData
#define IO_NOT_PWDN    portE18DevData
#define IO_NOT_RESET   portE19DevData
            /*!
             * @}
             */
            /*!
             * @{
             */
#if USING_DMA
#define DMA4SPI0 dmaController4SlaveSPIDevData
#define DMA4SPI1 dmaController4MasterSPIDevData
#endif
            /*!
             * @{
             */
#if USING_SPI0
#define SPI0 slaveSPI0DevData
#endif
#if USING_SPI1
#define SPI1 masterSPI1DevData
#endif

#if USING_SPI0_DMA
#define SPI0RxDma slaveSPIRxDmaDevData
#define SPI0TxDma slaveSPITxDmaDevData
#endif
#if USING_SPI1_DMA
#define SPI1RxDma masterSPIRxDmaDevData
#define SPI1TxDma masterSPITxDmaDevData
#endif
            /*!
             * @}
             */
            /*!
             * @{
             */
#if USING_UART2
#define UART2 uart2DevData
#endif
            /*!
             * @}
             */
        /*!
         * @}
         */

/* 
 * ===================================================================
 * Functions Aliases
 * ===================================================================
 */
        /*!
         * @addtogroup FuncAla Functions Aliases 
         * @{
         */
            /*!
             * @{
             */
#define SysTickInit()                     SysTick_Init()
#define SysTickWriteReloadValueReg(value) SysTick_PDD_WriteReloadValueReg(SYSTICK, value)
#define SysTickEnable()                   SysTick_PDD_EnableDevice(SYSTICK, PDD_ENABLE)
#define SysTickDisable()                  SysTick_PDD_EnableDevice(SYSTICK, PDD_DISABLE)
#define SysTickClearCountFlag()           SysTick_PDD_ClearInterruptFlag(SYSTICK)
#define SysTickGetCountFlag()             SysTick_PDD_GetInterruptFlag(SYSTICK)
#define SysTickGetClockSource()           SysTick_PDD_GetClkSource(SYSTICK)                     /*!< 0 - External Clock, 1 - Processor Clock.*/
#define SysTickSetClockSource(source)     SysTick_PDD_SetClkSource(SYSTICK, source)
            /*!
             * @}
             */
            /*!
             * @{ 
             */
#define EIntSyncInterruptInit(userDataPtr)    EINT_SYNC_INT_Init(userDataPtr)
#define EIntSyncInterruptEnable(userDataPtr)  EINT_SYNC_INT_Enable(userDataPtr)
#define EIntSyncInterruptDisable(userDataPtr) EINT_SYNC_INT_Disable(userDataPtr)
            /*!
             * @}
             */
            /*!
             * @{ 
             */
#define IOStartInit(userDataPtr) BitIO_START_Init(userDataPtr)
#define IOStartGetVal()          BitIO_START_GetVal(IO_START)
#define IOStartPutVal(value)     BitIO_START_PutVal(IO_START, value)
#define IOStartClrVal()          BitIO_START_ClrVal(IO_START)
#define IOStartSetVal()          BitIO_START_SetVal(IO_START)
            /*!
             * @}
             */
            /*!
             * @{ 
             */
#define IODaisyInInit(userDataPtr) BitIO_DAISY_IN_Init(userDataPtr)
#define IODaisyInGetVal()          BitIO_DAISY_IN_GetVal(IO_DAISY_IN)
#define IODaisyInPutVal(value)     BitIO_DAISY_IN_PutVal(IO_DAISY_IN,value)
#define IODaisyInClrVal()          BitIO_DAISY_IN_ClrVal(IO_DAISY_IN)
#define IODaisyInSetVal()          BitIO_DAISY_IN_SetVal(IO_DAISY_IN)
            /*!
             * @}
             */
            /*!
             * @{ 
             */
#define IOClockSelectInit(userDataPtr) BitIO_CLKSEL_Init(userDataPtr)
#define IOClockSelectGetVal()          BitIO_CLKSEL_GetVal(IO_CLKSEL)
#define IOClockSelectPutVal(value)     BitIO_CLKSEL_PutVal(IO_CLKSEL, value)
#define IOClockSelectClrVal()          BitIO_CLKSEL_ClrVal(IO_CLKSEL)
#define IOClockSelectSetVal()          BitIO_CLKSEL_SetVal(IO_CLKSEL)
            /*!
             * @}
             */
            /*!
             * @{ 
             */
#define EIntNotReadyInit(userDataPtr)    EINT_NOT_DRDY_Init(userDataPtr)
#define EIntNotReadyEnable(userDataPtr)  EINT_NOT_DRDY_Enable(userDataPtr)
#define EIntNotReadyDisable(userDataPtr) EINT_NOT_DRDY_Disable(userDataPtr)
            /*!
             * @}
             */
            /*!
             * @{ 
             */
#define IONotPowerDownInit(userDataPtr) BitIO_NOT_PWDN_Init(userDataPtr)
#define IONotPowerDownGetVal()          BitIO_NOT_PWDN_GetVal(IO_NOT_PWDN)
#define IONotPowerDownPutVal(value)     BitIO_NOT_PWDN_PutVal(IO_NOT_PWDN, value)
#define IONotPowerDownClrVal()          BitIO_NOT_PWDN_ClrVal(IO_NOT_PWDN)
#define IONotPowerDownSetVal()          BitIO_NOT_PWDN_SetVal(IO_NOT_PWDN)
            /*!
             * @}
             */
            /*!
             * @{ 
             */
#define IONotResetInit(userDataPtr) BitIO_NOT_RESET_Init(userDataPtr)
#define IONotResetGetVal()          BitIO_NOT_RESET_GetVal(IO_NOT_RESET)
#define IONotResetPutVal(value)     BitIO_NOT_RESET_PutVal(IO_NOT_RESET, value)
#define IONotResetClrVal()          BitIO_NOT_RESET_ClrVal(IO_NOT_RESET)
#define IONotResetSetVal()          BitIO_NOT_RESET_SetVal(IO_NOT_RESET)
            /*!
             * @}
             */
            /*!
             * @{
             */
//#define IOTestSignalInit(userDataPtr) BitIO_TEST_SIGNAL_Init(userDataPtr)
//#define IOTestSignalGetVal()          BitIO_TEST_SIGNAL_GetVal(IO_TEST_SGINAL)
//#define IOTestSignalPutVal(value)     BitIO_TEST_SIGNAL_PutVal(IO_TEST_SGINAL, value)
//#define IOTestSignalClrVal()          BitIO_TEST_SIGNAL_ClrVal(IO_TEST_SGINAL)
//#define IOTestSignalSetVal()          BitIO_TEST_SIGNAL_SetVal(IO_TEST_SGINAL)
            /*!
             * @}
             */
            /*!
             * @{
             */
#if USING_DMA
#define DMA4SPI0Init()                                               DMA_S_SPI_Init(DMA4SPI1)
#define DMA4SPI0Enable()                                             DMA_S_SPI_Enable(DMA4SPI1)
#define DMA4SPI0Disable()                                            DMA_S_SPI_Disable(DMA4SPI1)
#define DMA4SPI0AllocateChannel(descriptorPtr)                       DMA_S_SPI_AllocateChannel(DMA4SPI1, descriptorPtr)
#define DMA4SPI0EnableChannel(descriptorPtr)                         DMA_S_SPI_EnableChannel(DMA4SPI1, descriptorPtr)
#define DMA4SPI0DisableChannel(descriptorPtr)                        DMA_S_SPI_DisableChannel(DMA4SPI1, descriptorPtr)
#define DMA4SPI0SetChannelSourceAddress(descriptorPtr, address)      DMA_S_SPI_SetChannelSourceAddress(DMA4SPI1, descriptorPtr, address)
#define DMA4SPI0SetChannelDestinationAddress(descriptorPtr, address) DMA_S_SPI_SetChannelDestinationAddress(DMA4SPI1, descriptorPtr, address)
#define DMA4SPI0SetChannelByteCount(descriptorPtr, byteCount)        DMA_S_SPI_SetChannelByteCount(DMA4SPI1, descriptorPtr, byteCount)

#define DMA4SPI1Init()                                               DMA_M_SPI_Init(DMA4SPI1)
#define DMA4SPI1Enable()                                             DMA_M_SPI_Enable(DMA4SPI1)
#define DMA4SPI1Disable()                                            DMA_M_SPI_Disable(DMA4SPI1)
#define DMA4SPI1AllocateChannel(descriptorPtr)                       DMA_M_SPI_AllocateChannel(DMA4SPI1, descriptorPtr)
#define DMA4SPI1EnableChannel(descriptorPtr)                         DMA_M_SPI_EnableChannel(DMA4SPI1, descriptorPtr)
#define DMA4SPI1DisableChannel(descriptorPtr)                        DMA_M_SPI_DisableChannel(DMA4SPI1, descriptorPtr)
#define DMA4SPI1SetChannelSourceAddress(descriptorPtr, address)      DMA_M_SPI_SetChannelSourceAddress(DMA4SPI1, descriptorPtr, address)
#define DMA4SPI1SetChannelDestinationAddress(descriptorPtr, address) DMA_M_SPI_SetChannelDestinationAddress(DMA4SPI1, descriptorPtr, address)
#define DMA4SPI1SetChannelByteCount(descriptorPtr, byteCount)        DMA_M_SPI_SetChannelByteCount(DMA4SPI1, descriptorPtr, byteCount)
#endif
            /*!
             * @}
             */
            /*!
             * @{ 
             */
#if USING_SPI0
#define SPI0Init(userDataPtr)   SS_SPI0_Init(userDataPtr)
#define SPI0Receive(data, size) SS_SPI0_ReceiveBlock(SPI0, data, size)
#define SPI0Send(data, size)    SS_SPI0_SendBlock(SPI0, data, size)
#define SPI0EnableInterrupt()   SS_SPI0_EnableInterrupt(TRUE, TRUE)
#define SPI0EnableTxInterrupt() SS_SPI0_EnableInterrupt(TRUE, FALSE)
#define SPI0EnableRxInterrupt() SS_SPI0_EnableInterrupt(FALSE, TRUE)
#endif
            /*!
             * @}
             */
            /*!
             * @{ 
             */
#if USING_SPI1
#define SPI1Init(userDataPtr)   SM_SPI1_Init(userDataPtr)
#define SPI1Receive(data, size) SM_SPI1_ReceiveBlock(SPI1, data, size)
#define SPI1Send(data, size)    SM_SPI1_SendBlock(SPI1, data, size)
#define SPI1EnableInterrupt()   SM_SPI1_EnableInterrupt(TRUE, TRUE)
#define SPI1EnableTxInterrupt() SM_SPI1_EnableInterrupt(TRUE, FALSE)
#endif

#if USING_SPI0_DMA
#define SPI0RxDmaInit()                         DMAT_S_SPI_RX_Init(SPI1RxDma)
#define SPI0RxDmaAllocateChannel()              DMAT_S_SPI_RX_AllocateChannel(SPI1RxDma)
#define SPI0RxDmaEnableChannel()                DMAT_S_SPI_RX_EnableChannel(SPI1RxDma)
#define SPI0RxDmaDisbleChannel()                DMAT_S_SPI_RX_DisableChannel(SPI1RxDma)
#define SPI0RxDmaSetSourceAddress(address)      DMAT_S_SPI_RX_SetSourceAddress(SPI1RxDma, address)
#define SPI0RxDmaSetDestinationAddress(address) DMAT_S_SPI_RX_SetDestinationAddress(SPI1RxDma, address)
#define SPI0RxDmaSetByteCount(address)          DMAT_S_SPI_RX_SetByteCount(SPI1RxDma, address)

#define SPI0TxDmaInit()                         DMAT_S_SPI_TX_Init(SPI1TxDma)
#define SPI0TxDmaAllocateChannel()              DMAT_S_SPI_TX_AllocateChannel(SPI1TxDma)
#define SPI0TxDmaEnableChannel()                DMAT_S_SPI_TX_EnableChannel(SPI1TxDma)
#define SPI0TxDmaDisableChannel()               DMAT_S_SPI_TX_DisableChannel(SPI1TxDma)
#define SPI0TxDmaSetSourceAddress(address)      DMAT_S_SPI_TX_SetSourceAddress(SPI1TxDma, address)
#define SPI0TxDmaSetDestinationAddress(address) DMAT_S_SPI_TX_SetDestinationAddress(SPI1TxDma, address)
#define SPI0TxDmaSetByteCount(byteCount)        DMAT_S_SPI_TX_SetByteCount(SPI1TxDma, byteCount)
#endif
#if USING_SPI1_DMA
#define SPI1RxDmaInit()                         DMAT_M_SPI_RX_Init(SPI1RxDma)
#define SPI1RxDmaAllocateChannel()              DMAT_M_SPI_RX_AllocateChannel(SPI1RxDma)
#define SPI1RxDmaEnableChannel()                DMAT_M_SPI_RX_EnableChannel(SPI1RxDma)
#define SPI1RxDmaDisbleChannel()                DMAT_M_SPI_RX_DisableChannel(SPI1RxDma)
#define SPI1RxDmaSetSourceAddress(address)      DMAT_M_SPI_RX_SetSourceAddress(SPI1RxDma, address)
#define SPI1RxDmaSetDestinationAddress(address) DMAT_M_SPI_RX_SetDestinationAddress(SPI1RxDma, address)
#define SPI1RxDmaSetByteCount(address)          DMAT_M_SPI_RX_SetByteCount(SPI1RxDma, address)

#define SPI1TxDmaInit()                         DMAT_M_SPI_TX_Init(SPI1TxDma)
#define SPI1TxDmaAllocateChannel()              DMAT_M_SPI_TX_AllocateChannel(SPI1TxDma)
#define SPI1TxDmaEnableChannel()                DMAT_M_SPI_TX_EnableChannel(SPI1TxDma)
#define SPI1TxDmaDisableChannel()               DMAT_M_SPI_TX_DisableChannel(SPI1TxDma)
#define SPI1TxDmaSetSourceAddress(address)      DMAT_M_SPI_TX_SetSourceAddress(SPI1TxDma, address)
#define SPI1TxDmaSetDestinationAddress(address) DMAT_M_SPI_TX_SetDestinationAddress(SPI1TxDma, address)
#define SPI1TxDmaSetByteCount(byteCount)        DMAT_M_SPI_TX_SetByteCount(SPI1TxDma, byteCount)
#endif
            /*!
             * @}
             */
            /*!
             * @{ 
             */
#if USING_UART2
#define UART2Init(UserDataPtr)   AS_UART2_Init(UserDataPtr)
#define UART2Receive(data, size) AS_UART2_ReceiveBlock(UART2, data, size)
#define UART2Send(data, size)    AS_UART2_SendBlock(UART2, data, size)
#define Print(data)              flagUartSent = FALSE; \
                                 UART2Send(data, sizeof(data)); \
                                 while(!flagUartSent)
#define Printn(data, size)       flagUartSent = FALSE; \
                                 UART2Send(data, size); \
                                 while(!flagUartSent)
#endif
            /*!
             * @}
             */
        /*!
         * @}
         */

    /* END Aliases. */

#endif
/* #ifndef ALIASES_H_ */

/*!
 * @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Dong
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */
